###### Start performance timer
set tStart [clock clicks -milliseconds]

###### Load libraries

# Load the VTK package for visualization
package require vtk

# Stop Tk from popping up an empty window
wm withdraw .

package require FullMonte @FULLMONTE_VERSION_MAJOR@.@FULLMONTE_VERSION_MINOR@

puts "loaded libs"

###### Set file names and load files
set datapath "@FULLMONTE_DATA_DIR@/MMC/Colin27"

set meshfn "$datapath/Colin27.mesh"
set optfn  "$datapath/Colin27.opt"


TIMOSMeshReader R

R filename $meshfn
R read
set mesh [R mesh]

TIMOSMaterialReader MR
MR filename $optfn
MR read
set opt [MR materials]


set tLoaded [clock clicks -milliseconds]

Line P
P endpoint 0 "132 63 97"
P endpoint 1 "102 63 97"

###### Instantiate and configure simulation kernel
TetraVolumeKernel k

# Kernel properties
    k source P
	# the source to launch from

    k geometry $mesh
	# mesh

    k materials $opt
	# materials

# Monte Carlo kernel properties (standard, unlikely to need change)
    k roulettePrWin      0.1
	# probability of roulette win

    k rouletteWMin       1e-5
	# minimum weight "wmin" before roulette takes effect

    k maxSteps           10000
    k maxHits            10000

# Number of packets to simulate. More -> higher quality, longer run time. Try 10^6 to start.
    k packetCount        10000000

# Thread count should be number of cores on the machine, or 2x number of cores with SMT (aka. "Hyperthreading")
    k threadCount        8


proc progresstimer {} {
    # loop until kernel is done
	while { ![k done] } {
    	puts -nonewline [format "\rProgress %6.2f%%" [expr 100.0*[k progressFraction]]]
	    flush stdout

        # wait 200ms
    	after 200
	}
	puts [format "\rProgress %6.2f%%" 100.0]
}


###### VTK file write pipeline

# Make FullMonte mesh data structure available to VTK
vtkFullMonteTetraMeshWrapper VTKM
    VTKM mesh $mesh


### VOLUME DATA

vtkFullMonteArrayAdaptor vtkPhiV

# vtkFieldData stores multiple named arrays which hold one entry per geometry element (here, tetrahedron)
# first add an array "Tissue Type" from the mesh regions
# we will later add fluence for each tetrahedral volume element
vtkFieldData volumeFieldData
    volumeFieldData AddArray [VTKM regions]

# data object holds the field data
vtkDataObject volumeDataObject
    volumeDataObject SetFieldData volumeFieldData

# Merge the mesh geometry with the field data object
vtkMergeDataObjectFilter mergeVolume
    mergeVolume SetDataObjectInputData volumeDataObject
    mergeVolume SetInputData [VTKM blankMesh]
    mergeVolume SetOutputFieldToCellDataField

# write the resulting volume data to a file
vtkUnstructuredGridWriter VW
    VW SetInputConnection [mergeVolume GetOutputPort]

EnergyToFluence EVF
    EVF mesh $mesh
    EVF materials $opt

###### Run experiments
puts "Start Trial"
k randSeed 0
# set the random seed

# start the kernel, show the progress timer, and wait until the kernel is done
k startAsync
    progresstimer
k finishAsync

puts "Kernel is done"

#    OutputDataSummarize OS
set ODC [k results]

EVF source [$ODC getByIndex 2]
EVF update

vtkPhiV source [EVF result]
volumeFieldData AddArray [vtkPhiV array]
   [vtkPhiV array] SetName "fluence0"

VW SetFileName "../Examples/Data/colin27/FullMonte_fluence_line_0.vtk"
#	VW SetFileTypeToBinary
VW Update

volumeFieldData RemoveArray [vtkPhiV array]
puts "Trial complete"

exit
